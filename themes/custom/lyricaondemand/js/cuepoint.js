/******** Any scripts specific to page samples should go here *********//**** Brightcove Learning namespace ****/var BCLS = (function() {	var modVP,		modExp,		modCon,		mediaFriendly,		mediaName,		mediaID=0,		mediaLength,		mediaOffset=0,		mediaTagsArray = [],		mediaTagsArray2 = [],		mediaRefID,		mediaPlayerName="<name>", //Required hard code player name here		player,		APIModules,		mediaEvent,		playerType,		timelineLength,		videoPlayer,		cuePointsModule,		videoLength,		lastProgressEvt = null,		cuePointDataObj = {},		timeRanges = [],		i = 0,		j = 0,		max = 0,		obj,		// Handlebars templates for the chapter list and tick marks		//chapterlistTemplate = "{{#cuePointData}}<div class=\"chapter clearfix\" data-time=\"{{time}}\"><div class=\"chapter-num\">{{num}}.</div><div class=\"chapter-name\">{{name}}</div><div class=\"chapter-timestamp\">{{minutes}}</div></div>{{/cuePointData}}",		template,		data,		results,		t,		$item,		$this;	// private functions	/**** function to process the cue points ****/	getCuePoints = function(videoID) {		cuePointsModule.getCuePoints(videoID, function(cuePointData) {			// make an object to pass to Handlebars			cuePointDataObj = {};			// sort the array to get cue points in order			cuePointData.sort(function(a, b) {				return a.time - b.time;			});			// remove the preroll and postroll cue points			cuePointData.splice(0, 1);			cuePointData.splice((cuePointData.length - 1), 1);			// add the cue point data to the data object for Handlebars			for (var i = 0; i < cuePointData.length; i++) {			  cuePointData[i].num = i+1;			  cuePointData[i].minutes = BCLSsecondsToTime(cuePointData[i].time);			  //console.log(cuePointData[i]);			}			cuePointDataObj.cuePointData = cuePointData;			//console.log(cuePointData);			// build an array of time ranges			timeRanges = [];			for (var i = 0; i < cuePointData.length; i++) {				var obj = {};				var j = i + 1;				obj.start = cuePointData[i].time;				obj.chapter = cuePointData[i].name;				if (i !== (cuePointData.length - 1)) {					obj.end = cuePointData[j].time;				} else {					obj.end = videoLength;				}				timeRanges.push(obj);				timeRanges[0].start = 0;				//console.log(timeRanges);			}			// start the video - won't work on mobile devices!			//videoPlayer.play();		})	};	/**** function to build the chapter list ****/	setchapterlist = function() {		/*template = Handlebars.compile(chapterlistTemplate);		data = cuePointDataObj;		results = template(data);		$(".chapters").html(results);*/		// add event listener for chapterlist items		data = cuePointDataObj;		$(".chapter").each(function(index) {			$(this).attr("data-time", Math.ceil(data.cuePointData[index].time));		});		$(".chapter").on("click", function(evt) {			$this = $(this);			// highlight selected item			highlightItem($this);			//$this.index			// play the video			playChapter($this.attr("data-time"));			lastProgressEvt = Number($this.attr("data-time"));		});	};	/**** function to highlight current chapter ****/	highlightItem = function($item) {		//console.log($item);		$item.addClass("chapter-item-selected");		$item.siblings().removeClass("chapter-item-selected");	};	/**** function to play a chapter ****/	playChapter = function(time) {		// if the video is not playing, start it and function calls itself again		videoPlayer.getIsPlaying(function(isPlaying) {			if (isPlaying == true) {				videoPlayer.seek(time);			} else {				// function recalls itself till result is true				videoPlayer.play();				playChapter(time);			}		});	};		var onCue = function(evt) {		console.log('on cue');		var $item = jQuery(".chapters").find("[data-time='" + evt.cuePoint.time + "']");		highlightItem($item);	}	/************************************	utility to extract h/m/s from seconds	************************************/	BCLSsecondsToTime = function (secs) {	  var hours = Math.floor(secs / (60 * 60));	  if (hours < 10 ) {		hours = "0" + hours.toString();	  } else {		hours = hours.toString();	  };	  var divisor_for_minutes = secs % (60 * 60);	  var minutes = Math.floor(divisor_for_minutes / 60);	  if (minutes < 10 ) {		minutes = "0" + minutes.toString();	  } else {		minutes = minutes.toString();	  };	  var divisor_for_seconds = divisor_for_minutes % 60;	  var seconds = Math.floor(divisor_for_seconds);	  if (seconds < 10) {		seconds = "0" + seconds.toString();	  } else {		seconds = seconds.toString();	  };	  var obj = {		"h": hours,		"m": minutes,		"s": seconds	  };	  if(hours > 0) {	  	return obj.h + ":" + obj.m + ":" + obj.s;	  }	  return obj.m + ":" + obj.s;	}	return {		/**** template loaded event handler ****/		onTemplateLoad: function(experienceID) {			//$(".chapters").html("<div><img src='/sites/default/themes/custom/lyricaondemand/images/ajax-loader.gif'></div>");			// get a reference to the player and API Modules and Events			player = brightcove.api.getExperience(experienceID);			APIModules = brightcove.api.modules.APIModules;			mediaEvent = brightcove.api.events.MediaEvent;			modVP = player.getModule(brightcove.api.modules.APIModules.VIDEO_PLAYER);			//modExp = player.getModule(brightcove.api.modules.APIModules.EXPERIENCE);			//modCon = player.getModule(brightcove.api.modules.APIModules.CONTENT);			video = player.getModule(APIModules.VIDEO_PLAYER);			video.setConnectOnLoad(false);			video.enableInitialBandwidthDetection(false);			video.setDefaultBufferTime(10);			//console.log('here loaded');			playerType = player.type;			if (playerType == "html") {				timelineLength = 290;				$("#BCL_chapterTicks").addClass("htmlPlayer");			} else {				timelineLength = 210;				$("#BCL_chapterTicks").addClass("flashPlayer");			};		},		/**** template ready event handler ****/		onTemplateReady: function(evt) {			// get references to modules			videoPlayer = player.getModule(APIModules.VIDEO_PLAYER);			cuePointsModule = player.getModule(APIModules.CUE_POINTS);			// fetch the video data and process the cuepoint			videoPlayer.getCurrentVideo(function(videoDTO) {				// call getCuePoints				getCuePoints(videoDTO.id);				videoLength = videoDTO.length / 1000;			});			// add event listeners for media begin and progress events			videoPlayer.addEventListener(mediaEvent.PLAY, BCLS.onMediaPlay);			videoPlayer.addEventListener(mediaEvent.SEEK_NOTIFY, BCLS.onMediaSeek);			videoPlayer.addEventListener(mediaEvent.STOP, BCLS.onMediaStop);			videoPlayer.addEventListener(mediaEvent.BEGIN, BCLS.onMediaBegin);			videoPlayer.addEventListener(mediaEvent.PROGRESS, BCLS.onMediaProgress);			cuePointsModule.addEventListener(brightcove.api.events.CuePointEvent.CUE, onCue);						videoPlayer.setBackBufferCapacity(120);			videoPlayer.setBufferCapacity(120);									// videoPlayer.getCurrentRendition(function(renditionDTO) {			// if (renditionDTO) {			  // //logit("condition", "renditionDTO found");			  // calulateNewPercentage(renditionDTO.frameWidth, renditionDTO.frameHeight);			// } else {			  // //logit("condition", "renditionDTO NOT found");			  // videoPlayer.addEventListener(brightcove.api.events.MediaEvent.PLAY, function(event) {				// calulateNewPercentage(event.media.renditions[0].frameWidth, event.media.renditions[0].frameHeight);			  // });				// }			// });			// var evt = document.createEvent('UIEvents');			// evt.initUIEvent('resize',true,false,0);			// window.dispatchEvent(evt);			//videoPlayer.play();		},		/**** media begin handler ****/		onMediaBegin: function(evt) {			console.log('media Begin');			// populate the template with data			setchapterlist();			highlightItem($(".chapter").eq(0));			mediaLength=evt.duration;  //Required video duration			mediaOffset=Math.floor(evt.position); //Required video position			mediaID=(evt.media.id).toString();  //Required video id			mediaFriendly=evt.media.displayName; //Required video title			mediaName=mediaID+":"+mediaFriendly; //Required Format video name			mediaRefID=evt.media.referenceId;  //Optional reference id			mediaPlayerType=player.type; //Optional player type			mediaTagsArray=evt.media.tags; //Optional tags			mediaPlaylist="";//Optional playlist id			for (i=0;i<mediaTagsArray.length;i++) {				mediaTagsArray2[i]=mediaTagsArray[i]['name'];			}			if (mediaPlayerType=="flash"){  //Optional playlist id				mediaPlaylist=(evt.media.lineupId).toString();}else{				mediaPlaylist=(evt.media.playlistID).toString();			}			/* Check for start of video */			if (mediaOffset==0) {				//console.log('hre');				/* These data points are optional. If using SC14, change context data variables to hard coded variable names and change trackVars above. */				s.contextData['bc_tags'] = mediaTagsArray2.toString(); //Optional returns list of tags for current video.  Flash only.				s.contextData['bc_refid'] = mediaRefID; //Optional returns reference id				s.contextData['bc_player'] = mediaPlayerName; //Optional player name is currently hard coded.  Will be dynamic in later releases.				s.contextData['bc_playertype'] = mediaPlayerType; //Optional returns flash or html				s.contextData['bc_playlist'] = mediaPlaylist; //Optional returns playlist number for current video. 				//console.log(s.contextData);				s.Media.open(mediaName,mediaLength,mediaPlayerName);				s.Media.play(mediaName,mediaOffset);			} else{				s.Media.play(mediaName,mediaOffset);			}		},		onMediaProgress: function(evt, index) {			//console.log('media progress');			$(".video-loader").html("");			if (lastProgressEvt) {				if (lastProgressEvt !== evt.position) {					evt.position = lastProgressEvt;				} else if (Math.abs(lastProgressEvt - evt.position) < 1){					lastProgressEvt = null;				}			}			// for (i = 0, max = timeRanges.length; i < max; i++) {                // if (Math.ceil(evt.position) > timeRanges[i].start && Math.ceil(evt.position) < timeRanges[i].end) {                	// highlightItem($(".chapter").eq(i));                	// break;                // }            // }			s.Media.monitor = function (s,media) {				if (media.event == "MILESTONE") {					/* Use to set additional data points during milestone calls */					s.Media.track(media.name); //Uncomment if setting extra milestone data.				}			}		},		onMediaPlay: function (evt) {			$(".video-loader").html("<img src='/sites/default/themes/custom/lyricaondemand/images/ajax-loader.gif'>");			//console.log('playing');		},		onMediaStop: function (evt) {			 //console.log('stop!!!');			mediaOffset=Math.floor(evt.position);			if (mediaOffset==mediaLength) {				s.Media.stop(mediaName,mediaOffset);				s.Media.close(mediaName);}else{				s.Media.stop(mediaName,mediaOffset);			}		},		onMediaSeek: function (evt) {			var $item = jQuery(".chapters").find("[data-time]");			 jQuery.each( $item, function( key, value ) {				var chaptertime = jQuery( value ).attr('data-time');				var nexttime = $item.eq(key + 1).attr('data-time');				if(nexttime != 'undefined') {					if (evt.position > chaptertime && evt.position < nexttime) {						highlightItem(jQuery(this));					}				}			 });						$(".video-loader").html("<img src='/sites/default/themes/custom/lyricaondemand/images/ajax-loader.gif'>");		}	}}());